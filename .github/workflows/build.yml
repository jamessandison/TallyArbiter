name: Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build_cli:
    name: Build CLI on Ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14
    - name: Install dependencies
      run: npm i -f
    - name: Create env file
      run: |
        touch .env
        echo SENTRY_ENABLED=1 >> .env
        echo SENTRY_DSN=${{ secrets.SENTRY_DSN }} >> .env
    - name: Build
      run: npm pack
    - name: NPM Publish
      if: startsWith(github.ref, 'refs/tags/v')
      uses: JS-DevTools/npm-publish@v1
      with:
        token: ${{ secrets.NPM_ACCESS_TOKEN }}
##    - uses: Saionaro/extract-package-version@v1.0.6
##      id: package-version
##    - name: Upload Artifact
##      uses: actions/upload-artifact@v2
##      with:
##        name: 'TallyArbiter-${{ steps.package-version.outputs.version }}'
##        path: 'TallyArbiter-${{ steps.package-version.outputs.version }}.tgz'

  build_docker:
    name: Build Docker image on Ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14
    - name: Install dependencies and build
      run: npm i -f; npm run build
    - name: Set up QEMU
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/setup-qemu-action@master
      with:
        platforms: all
    - name: Set up Docker Buildx
      if: startsWith(github.ref, 'refs/tags/v')
      id: buildx
      uses: docker/setup-buildx-action@master
    - name: Get Docker meta
      id: meta
      uses: crazy-max/ghaction-docker-meta@v2
      with:
        images: josephdadams/tallyarbiter
        tags: |
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=ref,event=tag
        flavor: |
          latest=false
    - name: Login to DockerHub
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Create env file
      run: |
        touch .env
        echo SENTRY_ENABLED=1 >> .env
        echo SENTRY_DSN=${{ secrets.SENTRY_DSN }} >> .env
    - name: Build and push
      if: startsWith(github.ref, 'refs/tags/v') != true
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ startsWith(github.ref, 'refs/tags/v') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Build and push (multiarch)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        push: ${{ startsWith(github.ref, 'refs/tags/v') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6

  build_desktop:
    name: Build Desktop on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14
    - name: Create env file
      run: |
        touch .env
        echo SENTRY_ENABLED=1 >> .env
        echo SENTRY_DSN=${{ secrets.SENTRY_DSN }} >> .env
    - name: Install dependencies and build
      run: npm i -f; npm run build
    - name: Build
      uses: samuelmeuli/action-electron-builder@v1.6.0
      with:
        github_token: ${{ secrets.github_token }}
        release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        skip_build: true
##    - name: Get current version
##      uses: Saionaro/extract-package-version@v1.0.6
##      id: package-version
##    - name: Upload Artifact
##      uses: actions/upload-artifact@v2
##      if: matrix.os == 'ubuntu-latest'
##      with:
##        name: 'TallyArbiter-${{ steps.package-version.outputs.version }}-Linux'
##        path: 'release/TallyArbiter-${{ steps.package-version.outputs.version }}.AppImage'
##    - name: Upload Artifact
##      uses: actions/upload-artifact@v2
##      if: matrix.os == 'macos-latest'
##      with:
##        name: 'TallyArbiter-${{ steps.package-version.outputs.version }}-MacOS'
##        path: 'release/TallyArbiter-${{ steps.package-version.outputs.version }}.dmg'
##    - name: Upload Artifact
##      uses: actions/upload-artifact@v2
##      if: matrix.os == 'windows-latest'
##      with:
##        name: 'TallyArbiter-${{ steps.package-version.outputs.version }}-Windows'
##        path: 'release/TallyArbiter Setup ${{ steps.package-version.outputs.version }}.exe'
